


Chapter01
Writing rpbust code means deliberately thinking about the future
Clean code expresses its intent clearly and concisely

Specific practices for writing clean code:
1.) Organizing your code in an appropriately granular fashion
2.) Providing good documentation
3.) Naming your variables/functions/types well
4.) Keeping functions short and simple

A robust codebase is resilient and error-free in spite of constant change

Lookup Yak-Shaving

What's your intent?

Asynchronous Communication: means producing information and consuming that information are independent of each other. There is a real time gap between the production and consumption.
Proximity: how close in time the communicators need to be in order for that communication to be fruitful
Cost: the measure of effort to communicate
Other factors:
-Discoverability
-Maintenance cost
-Production cost
Page 30 displays a good graph of this

Your codebase becomes the best possible option for expressing your decisions, opinions, and workarounds clearly

Examples of Intent in Python Page 32

If you're looking for specific fields in types of collections, it is a good sign to use a user-defined type

The Law Of Least Surprise (Law of Least Astonishment): that a program should always respond to the user in the way that astonishes them the least.

Two types of complexity:
1.) Necessary complexity: the complexity inherent in your domain
2.) Accidental complexity: complexity that produces superfluous, wasteful or confusing statements in code. What happens when a system evolves over time, features are jammed in (avoid this).

Good test to determine the robustness of your code is the difficulty onboarding new developes into understanding your codebase.



Chapter02
Types

Type is a communication method, they convey information.
1.) Mechanical representation: types communicate behaviors and constraints to the Python Language itself
2.) Semantic representation: types communicate behaviors and constraints to other developers

Duck typing: the ability to use objects and entities in a programming language as long as they adhere to some interface.

Lookup
from typing import Iterable



Chapter03
Type annotations
serve as type hints

def func(parameter_name: type_hint) -> return_type:
	# code

Can alos annotate variables
variable_name: type_name = value

Typecheckers allow the type annotations from communication method to a safety net. It is a form of static analysis.
Static analysis tools: run on your source code and don't impact your runtime at all. mypy is a popular one



Chapter04
Constraining Types

Different techniques:
1.) Optional: use to replace None references in your codebase
2.) Union: use to present a selection of types
3.) Literal: use to restrict developers to very specific values
4.) Annotated: use to provide additional description of your types
5.) NewType: use to restrict a type to a specific context
6.) Final: use to prevent variables from being rebounf to a new value

Optional Type
from typing import Optional
maybe_a_string: Optional[str] = 'test'
maybe: Optional[str] = None

similar to the null referencing operator

Union Types
a type that indicates that multiple disparate types may be used with the same variable
from typing import Union
def func(argument_name: data_type) -> Union[type1, type2]:
	# code

Optional is a specialized version of Union. Optional[int] is the same as Union[int, None]
Product and Sum Types

Literal Types
Allows you to restrict the variable to a very specific set of values
More lightweight than enumerations
from typing import Literal
variable_name: Literal['only', 'the', 'values', 'you', 'want']

Annotated Types
Not possible to contraint all values with literal, not a type checker at this point, but more of a communication method

NewType
from typing import NewType
variable_name = NewType("new_type", existing_type)
in practice
mystock = NewType("mystock", Stock)

restricts implicit type conversions

Final Types
Restricts a type from changing its value
ID_NAME: Final = value



Chapter05
Annotating collections

CollectionMapping = dict[str, int]
def my_func(argument1: list[Type]) -> CollectionMapping:
	# code

TypedDict
only for the typechecker's benefit, performs no validation
from typing import TypedDict
Python 3.8

JSON
YAML
TOML
XML
CSV

Creating new collections

Generics
from typing import TypeVar
T = TypeVar('T')
def func(collection_name: list[T]) -> list[T]:
	# code

When Modifying existing types the best is to use: UserDict, UserString, UserList
the default collections code is built for performance and uses inline functions, that could result in your code not being called

Page 95 good example of creating your own collection



Chapter06
Typechecker

mypy is the typechecker he uses

PyCharm uses mypy by default


Typechecker's strictness: the amount of errors reported

pip install mypy

Alternative typecheckers
Pyre pip install pyre-check Facebook
Pysa: a static code analyzer build into Pyre. Specializes in a type of security static analysis known as taint analysis. Taint analysis: the tracking of potentially tainted data such as user-supplied input
Lookup Remote Code Execution RCE
Page 108 to 110 to protect agaisnt Tainted Data

Pyright pip install Microsoft
Pylace built upon Pyright and uses type annotations to provide a better code-editing experience



Chapter07
Green-field project: a brand-new project
Brown-field project: legacy code
Legacy code: code where you can no longer discuss the code with the developers who wrote it

Strategies to implement annotations
-Annotate any new code that you write
-Annotate any old code that you change
This results in type annotations in your code except code that hasn't been changed in a long time, meaning this code is relatively stable

MonkeyType
A tool that will automatically annotate your Python code, will only annotate code that you run first, only annotates code it sees at runtime
pip install monkeytype

Pytype
adds type annotations through static analysis, does not need to run your code to figure out types
pip install pytype



Chapter08
Enums

Example
from enum import Enum

class MotherSauce(Enum):
    BECHAMEL = "Bechamel"
    VELOUTE = "Veloute"
    ESPANGNOLE = "Espagnole"
    TOMATO = "Tomato"
    HOLLANDAISE = "Hollandaise"

# to access
print(MotherSauce.BECHAMEL)

Automatic values
from enum import Enum, auto

class MotherSauce(Enum):
    BECHAMEL = auto()
    VELOUTE = auto()
    ESPANGNOLE = auto()
    TOMATO = auto()
    HOLLANDAISE = auto()

if you want to control the values you set use:
_generate_next_value()

Literal (Python 3.8) similar to Enum
variable_name: Literal['value01', 'value02', 'value03']

Flags
a way to represent a grouping of unique enumeration values universally

Example
from enum import Flag
class Allergen(Flag):
	# code
# now allows us to perform bitwise operations to combine or check

Integer Conversion
IntEnum: map to Enum
IntFlag: map ot Flag
a weaker type and not recommended to use

to compare Enums with numbers use
enum_name.name.value == 10

@unique to preserve uniqueness in your Enum



Chapter09
Data Classes
Data classes: user-defined types that let you group related data together. A heterogeneous collection of variables all rolled into a composite type, Python 3.7
Composite types: made up of multiple values and should always represent some sort of relationship or logical grouping

Creating a dataclass
must provide a default value or type so Python recognizes it as a member of that dataclasses

Example
from dataclasses import dataclass

@dataclass
class MyFraction:
    numerator: int = 0
    denominator: int = 1

Page 147 a good example of a @dataclass

Some built-in functionality

String Conversion

Equality
@dataclass(eq=True)

Relational Comparison
@dataclass(eq=True, order=True)

do not specify these parameters if you impelement your own __methods__

Immutability
@dataclass(frozen=True)
if you want to use your dataclass in a set or as a key in dictionary it must be hashable, meaning it implements __hash__(), if you freeze a dataclass this happens automatically



Chapter10
Classes

Invariants
Invariant is a property of an entity that remains unchanged throughout the life-time if that entity. Are concepts that hold true about our code

Single Responsibility Principle: states that each object should have one and only one reason to change.

SOLID Design Principles
Design Principles and Design Patterns
1.) Single Responsibility Principle: a principle for reuse and consolidation of code
2.) Open-Closed Principle: a principle for extensibility
3.) Liskov Substitution Principle: a principle for subtyping
4.) Interface Segregation Principle: a principle for abstraction
5.) Dependency Inversion Principle: a principle for decoupling dependencies

Every class has its own API, it is the cornerstone of how you interact with classes
Public: any other piece of code can access this part of the API
Protected: only subclasses should access this part of the API
Private: only this class (and any other instances of this class) should access this part of the API

_protectedAttribute
__privateAttribute

Methods are often separated into two categories:
1.) Accessors: are for retrieving information
2.) Mutators: things that alter the state of your object

Page 172 picking the appropriate abstraction



Chapter11
Defining your interfaces

Design methodology
Test-driven development (TDD) revolves around a simple loop:
1.) Add a failing test
2.) Write just enough code to pass that test
3.) Refactor

README-driven development (RDD): aimed at catching hard-to-use code before it's written, the goal is to distill your top-level ideas and most important interactions with your code into a single document that lives in your project, a README file

UX
Usavility testing: the process of actively asking your users what they think of your product

Page 180 to Page 190 an example of stepping through and creating interfaces



Chapter12
Subtyping
Subtyping: creating types based on other types

Inheritance
Substitutability: states that when you derive from a base class, you should be able to use that derived class in every instance that your use a base class

The Liskov Substitution Principle
Subtype requirement: Let Phi(X) be a property provable about objects X of type T. Then Phi(Y) should be true for objects Y of type S where S is a subtype of T
In order for a subtype to exist, it must adhere to all the same properties (behaviors) as the supertype
When designing with inheritance, think through the following:
	Invariants
	Preconditions: anything that must be true before interacting with a type's property
	Postcondition: anything that must be true after interacting with a type's property

Red flags for derived class's overridden functions when evaluating inheritance relatioships:
	Conditionally checking arguments
	Early return statements
	Throwing an exception
	Not call super()



Chapter13
Protocols
Python 3.8
Protocols solve the contradiction of ducktyping, the typechecker knows how to handle types known at static analysis time, but not at runtime. They annotate duck-typed variables during typechecking

Duck typing can also be called structural subtyping, or subtyping based on structure
Nominal subtyping: types that have different names are separate from one another

The iterator protocol is an example of a protocol

A protocol is a defined set of behaviors that objects may implement

Protocols
from typing import Protocol
class MyClass(Protocol):
	# code



Chapter14
Runtime Checking with pydantic



Chapter15
Extensibility: the property of systems that allows new functionality to be added without modifying existing parts of your system.

Open-Closed Principle (OCP): code should be open for extension and closed for modification. The heart f extensibility.



Chapter16
Dependencies

Dependencies are basically Relationships.

Tracks security vulnerabilities
https://cve.mitre.org

You can "pin" dependencies, freeze them in time

Types of Dependencies

Physical Dependencies
Relationship observed directly in code, the easiest to reason about

Logical Dependencies
When two entities have a relationship but no direct linkage in code, the dependency is abstracted, it contains a layer of indirection, a dependency that is only present at runtime

Temporal Dependencies
A type of logical dependency, but how you handle it becomes key. A dependency that is linked by time. Anytime there is a concrete order of operations.

Visualizing your dependencies
GraphViz library

High fan-in: a lot of dependencies coming in, but not going out. Want them to be leaves of your dependency graph, the bottom, stable
High fan-out: a lot of dependencies coming in, but you depend a large number of entities. Should be at the top of your dependency, where the business logic will likely live, it will change as the business evolves. Can withstand a higher rate of change.
Page 261 Illustration



Chapter17
Composability

Composability: focuses on building small components with minimal interdependecies and little business lgoic embedded inside

Policies: your business logic
Mechanisms: the pieces of code that provide how you will enact the policies



Chapter18
Event-Driven Architecture

Architecture: the set of high-level guidelines and constraints that shape how you desgin software. The vision that influences all developers.

Event-Driven Architecture: nofications in your system.

How it works:
Your stimulus is the producer of an event
A consumer of these events is the reaction to that stimulus
An event is a transmission of information from a producer to a consumer

Relies on a transport mechanism.
A transport mechanism: simply the way that two pieces of code pass data back and forth

Simple Events

Using a Message Broker
a specific piece of code that acts as a transport of data.
Producers publish data => data => Cosnumer use the identifier to subscribe to a topic

PyPubSub library

Observer Pattern
Your producer contains a list of observers: the consumers in this scenarion.
Page 285 example of Subscriber and Publisher classes

Reactive programming: revolves around streams of events. You define data sources as producers of these streams, and then link together multiple observers. Each observer is notified whenever there is a change in data and defines a series of operations for handling the data stream.
ReactiveX => RxPY



Chapter19
Pluggable Python

Extension points: parts of your system that other developers will use to extend functioanlity

The Template Method Pattern
A pattern for filling in the blanks of an algorithm, define an algorithm as a series of steps, but force the caller to override some of those steps.

The Strategy Pattern
For plugging entire alogrithms into a context.

Stevedore library for managing plug-ins



Chapter20
Static Analysis

Static analysis: a set of tools that inspect your codebase, looking for potential errors or inconsistencies.

Linting: Pylint

Cyclomatic complexity (Thomas McCabe): one of the most popular complexity heuristics. Must view your code as a control flow graph, or a graph that maps out different paths of execution your code can take.
mccabe library

Security Analysis
	Leaking secrets		dodgy library checks for leaked secrets
	Security flaw checking	Bandit library checks for common security problems



Chapter21
Testing Strategy

Types of tests and the questions they answer
Test type 	Question the test answers
Unit 		Do units (functions and classes) act as developers expect?
Integration 	Are separate parts of the system stitched together properly?
Acceptance 	Does the system do what the end user expects?
Load 		Does the system stay operational under heavy duress?
Security 	Does the system resist specific attacks and exploits?
Usability 	Is the system intuitive to use?

Arrange-Act-Assert (AAA) test pattern: you break up each test into three separate blocks of code:
1.) Arrange: setting up your preconditions
2.) Act: performing the operations that are being tested
3.) Assert: checking for any post-conditions
Optional
4.) Annihilate: clean-up your code

Test parameterization: the way of running the same test on different parameters

Hamcrest matchers: a way of writing assertions to read similarly to natural language.
PyHamcrest library supplies common matchers to help you write asserts



Chapter22
Acceptance Testing

Behavior-Driven Development (BDD)
A practice that focuses on defining the behaviors in your system.

behave framework and Gkerkin language to define requirements
Follows the Given-When-Then (GWT) format. Every requirement is organized as follows:
Feature: Name of test suite
Scenario: A test case
	Give some precondition
	When I take some action
	Then I expect this result

Executable Specifications: translate a set of requirements direcly to code
Traceability: the ability to connect your requirements to specific tests or code



Chapter23
Property-Based Testing

A form of generative testing: where tools generate test cases for you. You define properties for your system. Properties are invariants, they hold true for your system.

Boundary Value Analysis: when you analyze the code under test, looking for how different input influence control flow or different execution paths in your code.

hypothesis library



Chapter24
Mutation Testing

Mutation testing: the act of making changes in your source code with the intent of introducing bugs. Each change is known as a mutant. You then run your test suite. If the test fails, it means your tests were successful in eliminating the mutant. If the test passes they are not robust enough to catch legitmate failure, the mutant survives. A form of meta-testing, you're testing how good your tests are

mutmut library to do mutation testing for you


