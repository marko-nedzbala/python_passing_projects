Computational model: a computer implementation of the solution to a (scientific) problem for which a mathematical representation has been formulated.


Chapter01
A computer program consists of:
1.) data definitions
2.) sequence of instructions

General problem solving:
1.) Understand the problem
2.) Describe the problem in a clear, complete and unambiguous form
3.) Design a solution to the problem (algorithm)
4.) Develop a computer solution to the problem

Model: a representation of a system, a problem, or part of it.
Abstraction: the hiding of the details and leaving visible only the essential features of a particular system

General steps for the process of developing a model:
1.) Definition of the problem statement for the computational model
2.) Definition of the model specification to help define the conceptual model of the problem to be solved
3.) Definition of the mathematical model
4.) Model implementation
5.) Verification of the model
6.) Validation of the model

Computational models of how the model changes state in time:
1.) Continuous models: changes of state in the model occur continuously with time
2.) Discrete models: a system that changes its states at discrete points in time, at specific instants

Computational models of how the model changes on variability of some parameters:
1.) Deterministic models: a completely predictable behavior
2.) Stochastic models: includes some uncertainty implemented with random varaibles, whose values follow a probabilistic distribution

Software life cycle:
Waterfall model: the activity in a given phase cannot be started until the activity of the previous phase has been completed
1.) Analysis
2.) Design
3.) Implementation
4.) Testing
5.) Installation
6.) Maintenance

Decomposition, the technique used in modular design is top-down design



Chapter02
Program consists of:
1.) Data definitions: indicate the data to be manipulated by the instructions
2.) Sequence of instructions: perform the computations on the data in order to produce the desired results



Chapter03
Decomposition: the partitioning of a problem into smaller parts
Modular units: the small parts from decomposition



Chapter08
Abstraction: used to model the objects in a problem domain and involves the elimination of unessential characteristics. A model includes only the relevant aspects of the real-world system. Object-oriented modeling consists of:
1.) Identifying the relevant objects for the model
2.) Describing these objects using abstraction
3.) Defining collections of similar objects

Every object has:
1.) A state: represented by the set of properties (or attributes) and their associated values
2.) Behavior: represented by the operations, methods, of the object
3.) Identity: an implicit or explicit property that can uniquely identify an object

Interaction between 2 objects
The interaction between 2 objects involves an object sending messages to another object.
requestor: the objects that sends the messages, client
receiver: the object that receives the messages, supplier/provider
Method invocation: a message is always sent to a specific object and normally contains:
-the owner of the operation, which is the receiver of the message
-the operation to be invoked or started
-the input data required by the operation to perform
-the result of the operation

Views of a class
External view: class specification
Internal view: class implementation



Chapter09
Inheritance: a vertical relationship
Composition: a horizontal relationship

Data definitions:
Class variables: variables are shared by all objects or instances of the class, are prefixed with class_name.variable_name
Instance variables: are data definitions that appear inside a method and their values will unique to each instance or object of the class, are prefixed with self.variable_name

Categories of methods:
1.) Constructor methods: assign initial values to an instance
2.) Accessor methods: return the value of an instance variable or class variables
3.) Mutator methods: changes the value of an instace variable and in effect changes the state of the object referred
4.) Auxiliary methods: called only internally in the class and is called with self. prefix

Persistence of a variable: the interval of time that the data item exists, the lifetime of the data item



Chapter10
Linked Lists: a data structure that consists of a sequence of data items of the same/similar types and each data item or node has 1 or more links to another node. A linked list can grow or shrink during the execution of the program that is manipulating it.
Are considered low-level data strucutres and used to implement higher-level data structures, such as stacks and queues



Chapter11
Recursion:
1.) 1 or more base cases that define the terminating conditions
2.) 1 or more recursive cases

example
def rfact(n):
	if n < 0:
		return -1
	if n > 0:
		print("Factorial of ", n)
		res = n * rfact(n - 1) #the rfact here is the key
		return res
	else:
		return 1
think of a recursive function this way:
-the rfact goes into its own call
-keeps doing this until it hits its else clause
-returns the values

rfact(5)

res = 5 * rfact(5-1) * rfact(4-1) * rfact(3-1) * rfact(2-1) * rfact(1-1) ==> else
#return values, starts form the right and moves leftward
res = 5 * 24 * 6 * 2 * 1 * 1	



Chapter12
Arithmetic Growth





















































































